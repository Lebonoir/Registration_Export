/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package lastone;

/**
 *
 * @author quibo
 */
import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
public class AdminFramez extends javax.swing.JFrame {
private static final String DATABASE_URL = "jdbc:sqlite:saved_accounts.db";
    /**
     * Creates new form AdminFramez
     */
    public AdminFramez() {
        initComponents();
        displayAccounts();
    }
private void displayAccounts() {
     try (Connection conn = DriverManager.getConnection(DATABASE_URL);
         Statement stmt = conn.createStatement();
         ResultSet rs = stmt.executeQuery("SELECT name, email, username, password, account_type FROM saved_accounts")) {

        DefaultTableModel model = (DefaultTableModel) TableOfContents.getModel();
        model.setRowCount(0); // Clear the table

        while (rs.next()) {
            String name = rs.getString("name");
            String email = rs.getString("email");
            String username = rs.getString("username");
            String password = rs.getString("password");
            String accountType = rs.getString("account_type");
            model.addRow(new Object[]{name, email, username, password, accountType}); // Add all columns
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TableOfContents = new javax.swing.JTable();
        Quitbtn = new javax.swing.JButton();
        LGNbtn = new javax.swing.JButton();
        CreateACC = new javax.swing.JButton();
        UpdateBtn = new javax.swing.JButton();
        DeletezBTN = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        TableOfContents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "name", "Email", "Username", "Password", "Account type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TableOfContents);
        if (TableOfContents.getColumnModel().getColumnCount() > 0) {
            TableOfContents.getColumnModel().getColumn(0).setResizable(false);
            TableOfContents.getColumnModel().getColumn(1).setResizable(false);
            TableOfContents.getColumnModel().getColumn(2).setResizable(false);
            TableOfContents.getColumnModel().getColumn(3).setResizable(false);
            TableOfContents.getColumnModel().getColumn(4).setResizable(false);
        }

        Quitbtn.setText("Exit");
        Quitbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuitbtnActionPerformed(evt);
            }
        });

        LGNbtn.setText("Back to login");
        LGNbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LGNbtnActionPerformed(evt);
            }
        });

        CreateACC.setText("Create Account");
        CreateACC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateACCActionPerformed(evt);
            }
        });

        UpdateBtn.setText("Update");
        UpdateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateBtnActionPerformed(evt);
            }
        });

        DeletezBTN.setText("Delete");
        DeletezBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeletezBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Quitbtn)
                .addGap(39, 39, 39)
                .addComponent(LGNbtn)
                .addGap(38, 38, 38)
                .addComponent(CreateACC)
                .addGap(33, 33, 33)
                .addComponent(UpdateBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE)
                .addComponent(DeletezBTN)
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Quitbtn)
                    .addComponent(LGNbtn)
                    .addComponent(CreateACC)
                    .addComponent(UpdateBtn)
                    .addComponent(DeletezBTN))
                .addGap(0, 16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DeletezBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeletezBTNActionPerformed
        // TODO add your handling code here:
        int selectedRow = TableOfContents.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "To delete an account, please choose one.", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String username = (String) TableOfContents.getValueAt(selectedRow, 2);
        int confirm = JOptionPane.showConfirmDialog(this, "Would you really like to remove this account?", "Message", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            try (Connection conn = DriverManager.getConnection(DATABASE_URL);
                 PreparedStatement pstmt = conn.prepareStatement("DELETE FROM saved_accounts WHERE username = ?")) {
                pstmt.setString(1, username);
                int affectedRows = pstmt.executeUpdate();
                if (affectedRows > 0) {
                    JOptionPane.showMessageDialog(this, "account is deleted successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                    displayAccounts(); // Refresh the table after deletion
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_DeletezBTNActionPerformed

    private void CreateACCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateACCActionPerformed
        // TODO add your handling code here:
        new Registar().setVisible(true);
    }//GEN-LAST:event_CreateACCActionPerformed

    private void LGNbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LGNbtnActionPerformed
        // TODO add your handling code here:
         new LoginPreym().setVisible(true);
                dispose();
    }//GEN-LAST:event_LGNbtnActionPerformed

    private void QuitbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuitbtnActionPerformed
        // TODO add your handling code here:
        int result = JOptionPane.showConfirmDialog(null, "Do you want to exit?", "Message", JOptionPane.YES_NO_OPTION);
        
       if (result == JOptionPane.YES_OPTION) {
            JOptionPane.showMessageDialog(null, "Lebron Suarez ITE 232");
           System.exit(0); 
        }else{
           return;
       }
    }//GEN-LAST:event_QuitbtnActionPerformed

    private void UpdateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = TableOfContents.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select an account to update.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Get the data from the selected row
    String name = (String) TableOfContents.getValueAt(selectedRow, 0);
    String email = (String) TableOfContents.getValueAt(selectedRow, 1);
    String username = (String) TableOfContents.getValueAt(selectedRow, 2);
    String password = (String) TableOfContents.getValueAt(selectedRow, 3);
    String accountType = (String) TableOfContents.getValueAt(selectedRow, 4);

    // Prompt user for updated information
    String newName = JOptionPane.showInputDialog(this, "Enter new name:", name);
    String newEmail = JOptionPane.showInputDialog(this, "Enter new email:", email);
    String newUsername = JOptionPane.showInputDialog(this, "Enter a new username:", username);
    String newPassword = JOptionPane.showInputDialog(this, "Enter a new password:", password);
    String newAccountType = JOptionPane.showInputDialog(this, "Enter new account type(ADMIN,EMPLOYEE,CUSTOMER):", accountType);

    int confirm = JOptionPane.showConfirmDialog(this,
            "Are you sure you want to update this account?",
            "Confirm Update", JOptionPane.YES_NO_OPTION);
    if (confirm == JOptionPane.YES_OPTION) {
        try (Connection conn = DriverManager.getConnection(DATABASE_URL);
             PreparedStatement pstmt = conn.prepareStatement("UPDATE saved_accounts SET name=?, email=?, username=?, password=?, account_type=? WHERE username=?")) {
            pstmt.setString(1, newName);
            pstmt.setString(2, newEmail);
            pstmt.setString(3, newUsername);
            pstmt.setString(4, newPassword);
            pstmt.setString(5, newAccountType);
            pstmt.setString(6, username); // Where clause: username of the account to update
            int affectedRows = pstmt.executeUpdate();
            if (affectedRows > 0) {
                JOptionPane.showMessageDialog(this, "Account updated successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                displayAccounts(); // Refresh the table after update
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_UpdateBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminFramez.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminFramez.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminFramez.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminFramez.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminFramez().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CreateACC;
    private javax.swing.JButton DeletezBTN;
    private javax.swing.JButton LGNbtn;
    private javax.swing.JButton Quitbtn;
    private javax.swing.JTable TableOfContents;
    private javax.swing.JButton UpdateBtn;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
